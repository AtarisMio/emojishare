// Generated by CoffeeScript 1.10.0
(function() {
  (function(_, angular) {
    return angular.module('controller').controller('HomepageCtrl', _.ai('            @$scope, @$rootScope, @$window, @$q, @$location, @$document', (function() {
      function _Class($scope, $rootScope, $window, $q, $location, $document) {
        this.$scope = $scope;
        this.$rootScope = $rootScope;
        this.$window = $window;
        this.$q = $q;
        this.$location = $location;
        this.$document = $document;
        this.$window.scrollTo(0, 0);
        this.$rootScope.state = 'landing';
        angular.extend(this.$scope, {
          down: true,
          page_path: this.$location.absUrl(),
          loading: true,
          show_float_coupon: false
        });
        this.$scope.$on('$viewContentLoaded', function() {
          var waterFall;
          return waterFall = (function() {
            waterFall.prototype.MIN_COLUMN_COUNT = 2;

            waterFall.prototype.COLUMN_WIDTH = 220;

            waterFall.prototype.CELL_PADDING = 26;

            waterFall.prototype.GAP_HEIGHT = 15;

            waterFall.prototype.GAP_WIDTH = 15;

            waterFall.prototype.THRESHOLD = 2000;

            waterFall.prototype.columnHeights = 0;

            waterFall.prototype.columnCount = 0;

            waterFall.prototype.noticeDelay = null;

            waterFall.prototype.resizeDelay = null;

            waterFall.prototype.scrollDelay = null;

            waterFall.prototype.managing = false;

            waterFall.prototype.loading = false;

            waterFall.prototype.noticeContainer = document.querySelector('#notice');

            waterFall.prototype.cellsContainer = document.querySelector('#cells');

            waterFall.prototype.cellTemplate = document.querySelector('#template').innerHTML;

            waterFall.prototype.addEvent = function(element, eventName, handler) {
              var addEvent;
              if (element.addEventListener) {
                addEvent = function(element, eventName, handler) {
                  return element.addEventListener(type, handler, false);
                };
              } else if (element.attachEvent) {
                addEvent = function(element, eventName, handler) {
                  return element.attachEvent('on' + type, handler);
                };
              } else {
                addEvent = function(element, eventName, handler) {
                  return element['on' + type] = handler;
                };
              }
              return addEvent(element, eventName, handler);
            };

            waterFall.prototype.getMinVal = function(arr) {
              return Math.min.apply(Math, arr);
            };

            waterFall.prototype.getMaxVal = function(arr) {
              return Math.max.apply(Math, arr);
            };

            waterFall.prototype.getMinKey = function(arr) {
              var i, key, len, min;
              key = 0;
              min = arr[0];
              i = 1;
              len = arr.length;
              while (i < len) {
                if (arr[i] < min) {
                  key = i;
                  min = arr[i];
                }
                i++;
              }
              return key;
            };

            waterFall.prototype.getMaxKey = function(arr) {
              var i, key, len, max;
              key = 0;
              max = arr[0];
              i = 1;
              len = arr.length;
              while (i < len) {
                if (arr[i] > max) {
                  key = i;
                  max = arr[i];
                }
                i++;
              }
              return key;
            };

            waterFall.prototype.updateNotice = function(event) {
              var e, noticeDelay, target, targetTitle;
              clearTimeout(noticeDelay);
              e = event || window.event;
              target = e.target || e.srcElement;
              if (target.tagName === 'SPAN') {
                targetTitle = target.parentNode.tagLine;
                noticeContainer.innerHTML = (target.className === 'like' ? 'Liked ' : 'Marked ') + '<strong>' + targetTitle + '</strong>';
                noticeContainer.className = 'on';
                return noticeDelay = setTimeout(function() {
                  return noticeContainer.className = 'off';
                }, 2000);
              }
            };

            waterFall.prototype.getColumnCount = function() {
              return Math.max(MIN_COLUMN_COUNT, Math.floor((document.body.offsetWidth + GAP_WIDTH) / (COLUMN_WIDTH + GAP_WIDTH)));
            };

            waterFall.prototype.resetHeights = function(count) {
              var columnHeights;
              columnHeights = [];
              while (i < count) {
                columnHeights.push(0);
                i++;
              }
              return cellsContainer.style.width = (count * (COLUMN_WIDTH + GAP_WIDTH) - GAP_WIDTH) + 'px';
            };

            waterFall.prototype.appendCells = function(num) {
              if (loading) {

              }
            };

            waterFall.prototype.adjustCells = function(cells, reflow) {
              var columnHeight, columnIndex;
              columnIndex = 0;
              columnHeight = 0;
              _.forEach(cells, function(cell) {
                columnIndex = getMinKey(columnHeights);
                columnHeight = columnHeights[columnIndex];
                cell.style.height = (cell.offsetHeight - CELL_PADDING) + 'px';
                cell.style.left = columnIndex * (COLUMN_WIDTH + GAP_WIDTH) + 'px';
                cell.style.top = columnHeight + 'px';
                columnHeights[columnIndex] = columnHeight + GAP_HEIGHT + cell.offsetHeight;
                if (!reflow) {
                  return cell.className = "cell ready";
                }
              });
              cellsContainer.style.height = (getMaxVal(columnHeights)) + 'px';
              return manageCells();
            };

            waterFall.prototype.reflowCells = function() {
              var columnCount;
              columnCount = getColumnCount();
              if (columnHeights.length !== columnCount) {
                resetHeights(columnCount);
                return adjustCells(cellsContainer.children, true);
              } else {
                return manageCells();
              }
            };

            waterFall.prototype.manageCells = function() {
              var cells, managing, viewportBottom, viewportTop;
              managing = true;
              cells = cellsContainer.children;
              viewportTop = (document.body.scrollTop || document.documentElement.scrollTop) - cellsContainer.offsetTop;
              viewportBottom = (window.innerHeight || document.documentElement.clientHeight) + viewportTop;
              _.forEach(cells, function() {
                if (cell.offsetTop - viewportBottom > THRESHOLD || viewportTop - cell.offsetTop - cell.offsetHeight > THRESHOLD) {
                  if (cell.className === 'cell ready') {
                    cell.fragment = cell.innerHTML;
                    cell.innerHTML = '';
                    return cell.className = 'cell shadow';
                  }
                } else {
                  if (cell.className === 'celll shadow') {
                    cell.innerHTML = cell.fragment;
                    return cell.className = 'cell ready';
                  }
                }
              });
              if (viewportBottom > getMinVal(columnHeights)) {
                appendCells(columnCount);
              }
              return managing = false;
            };

            waterFall.prototype.delayedScroll = function() {
              var scrollDelay;
              clearTimeout(scrollDelay);
              if (!managing) {
                return scrollDelay = setTimeout(manageCells, 500);
              }
            };

            waterFall.prototype.delayedResize = function() {
              var resizeDelay;
              clearTimeout(resizeDelay);
              return resizeDelay = setTimeout(reflowCells, 500);
            };

            waterFall.prototype.init = function() {
              var columnCount;
              addEvent(cellsContainer, 'click', updateNotice);
              addEvent(window, 'resize', delayedResize);
              addEvent(window, 'scroll', delayedScroll);
              columnCount = getColumnCount;
              resetHeights(columnCount);
              return manageCells();
            };

            function waterFall(window, document) {
              addEvent(window, 'load', init);
            }

            return waterFall;

          })();
        });
        if (sessionStorage.name1 === "down") {
          this.$scope.down = false;
        }
      }

      return _Class;

    })()));
  })(_, angular);

}).call(this);

//# sourceMappingURL=homepage.ctrl.js.map
